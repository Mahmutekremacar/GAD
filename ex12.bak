#lang racket
(define (squared-max x y z) (if (> (* x x) (* y y)) 
                                (if (> (* x x) (* z z))  (* x x) (* z z))
                                (if (> (* y y) (* z z)) (* y y) (* z z))))



#;(define (zahl-umdrehen x)

 (define (add-d x digits)
   (+ digits 1) + (how-many-digits (quotient x 10) digits))

(define (how-many-digits x digits)
  (if (> x 10) (add-d x digits) (+ digits 0)))
  
(define (um-iter x y digits)
  (if (> (quotient x 10 ) 0)
      (um-iter (quotient x 10) (+ (* (remainder x 10) (expt 10 digits)) y) (- digits 1)) 
      (+ (* (remainder x 10) (expt 10 digits)) y)  )) 
  (um-iter x 0 (how-many-digits x 0)))

#;(zahl-umdrehen 446)


#;(define (zahl-umdrehen x)
  (define digits 0)
  
  #;(define (foo x)
    (if (> x 10)
        (digit-adder (+ digits 1) x)
        (+ digits 1)))
  
  #;(define (digit-adder digits x)
    (+ digits 1) + (foo (quotient x 10)))
  (define (degit_loop  x  y )( if(> (/ x  y ) 1 ) y (degit_loop x (/ y 10) )  ))
  
  (define (um-iter x x-not digits)
    (if (< digits 0)
        x-not
        (um-iter (quotient x 10) (* (+ (remainder x 10)) digits) (- digits 1))))
  
   (um-iter x 0 (degit_loop x 100000000000000000000000000) ))

#;(zahl-umdrehen 1234)



(define (aufsteigendes-produkt? a b c d)
  (if (< a b)
      (if (< b c)
          (if (< c d)
              (if (= d (+ a b c))
                  #t
                  #f)
              #f)
          #f)
      #f))

#;(define (aufsteigendes-produkt? a b c d) (and (< a b) (< b c) (< c d) (= d (+ a b c))))


(define (f1 a b) (and (not (and a b)) (or a b ) a b) ) 

(define (f2 a b c) (or a (and a b (not c)) (and (not a) c) (and (not a) (not b) c)))

(define (f3 a b c d) (and (xor (not a) b) (not (or a (not b ) c)) (or (not d) (not c) (not b) (not a)) ))


(define f (lambda (x) x))
(define (double g)
  (lambda (x) (g (g x))))

(f 1) ;; ((lambda (x))1) = > 1
((double f) 42) #| ((lambda (x) (f (f x))) 42)
                   (f(f 42))
                   (f 42)
                    42|#
((double (lambda (x) (* x 2))) 2)
;;((lambda (y) ((lambda (x) (* x 2)) ((lambda (x) (* x 2)) y))) 2)

;;(* ((lambda (x) (* x 2)) 2) 2)
;;(*(* 2 2) 2)
;;(* 4 2)
;;8




