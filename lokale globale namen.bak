#lang racket

#|(define (gut-genug? schaetzwert x)
(< (abs (- (quadrat schaetzwert) x)) 0.00001))

(define (mittelwert x y)
(/ (+ x y) 2))

(define (verbessern schaetzwert x)
(mittelwert schaetzwert (/ x schaetzwert)))

(define (wurzel-iter schaetzwert x)
(if (gut-genug? schaetzwert x)
schaetzwert
(wurzel-iter (verbessern schaetzwert x) x)))

(define (wurzel x)
(wurzel-iter 6.0 x))

(wurzel 4 )|#


#|(define wurzel( x schaetzwert)
  (define (wurzel-iter schaetzwert x)
    (if (gut-genug? schaetzwert x)
        schaetzwert
        (wurzel-iter (verbessern schaetzwert x) x)))
  (define (quadrat x)
  (* x x))
  (define (mittelwert x y)
    (/ ( + x y ) 2))
  (define (gut-genug schaetzwert x)
    (< (abs (- (quadrat schaetzwert) x)) 0.000000000000001))
  (define (verbessern schaetzwert x )
    (mittelwert schaetzwert (/ x schaetzwert)))
  (wurzel-iter 1.0 10)) |#



(define (wurzel x)
(define (wurzel-iter schaetzwert x)
(if (gut-genug? schaetzwert x)
schaetzwert
(wurzel-iter (verbessern schaetzwert x) x)))
(define (verbessern schaetzwert x)
(mittelwert schaetzwert (/ x schaetzwert)))
 (define (mittelwert x y)
    (/ ( + x y ) 2))
(define (gut-genug? schaetzwert x)
(< (abs (- (quadrat schaetzwert) x)) 0.000000000000000000001))
  (define (quadrat x)
  (* x x))
(wurzel-iter 1.0 x))
(wurzel 81)
